#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Student_Management_development_Club_System
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB")]
	public partial class DBClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStudentCourse(StudentCourse instance);
    partial void UpdateStudentCourse(StudentCourse instance);
    partial void DeleteStudentCourse(StudentCourse instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertCoursesSession(CoursesSession instance);
    partial void UpdateCoursesSession(CoursesSession instance);
    partial void DeleteCoursesSession(CoursesSession instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertStudentMark(StudentMark instance);
    partial void UpdateStudentMark(StudentMark instance);
    partial void DeleteStudentMark(StudentMark instance);
    #endregion
		
		public DBClassesDataContext() : 
				base(global::Student_Management_development_Club_System.Properties.Settings.Default.DBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<StudentCourse> StudentCourses
		{
			get
			{
				return this.GetTable<StudentCourse>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<CoursesSession> CoursesSessions
		{
			get
			{
				return this.GetTable<CoursesSession>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<StudentMark> StudentMarks
		{
			get
			{
				return this.GetTable<StudentMark>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentCourses")]
	public partial class StudentCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SC_Id;
		
		private int _S_id;
		
		private int _C_id;
		
		private System.DateTime _C_startDate;
		
		private System.DateTime _C_endDate;
		
		private int _CS_id;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<CoursesSession> _CoursesSession;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSC_IdChanging(int value);
    partial void OnSC_IdChanged();
    partial void OnS_idChanging(int value);
    partial void OnS_idChanged();
    partial void OnC_idChanging(int value);
    partial void OnC_idChanged();
    partial void OnC_startDateChanging(System.DateTime value);
    partial void OnC_startDateChanged();
    partial void OnC_endDateChanging(System.DateTime value);
    partial void OnC_endDateChanged();
    partial void OnCS_idChanging(int value);
    partial void OnCS_idChanged();
    #endregion
		
		public StudentCourse()
		{
			this._Course = default(EntityRef<Course>);
			this._CoursesSession = default(EntityRef<CoursesSession>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SC_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SC_Id
		{
			get
			{
				return this._SC_Id;
			}
			set
			{
				if ((this._SC_Id != value))
				{
					this.OnSC_IdChanging(value);
					this.SendPropertyChanging();
					this._SC_Id = value;
					this.SendPropertyChanged("SC_Id");
					this.OnSC_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_id", DbType="Int NOT NULL")]
		public int S_id
		{
			get
			{
				return this._S_id;
			}
			set
			{
				if ((this._S_id != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_idChanging(value);
					this.SendPropertyChanging();
					this._S_id = value;
					this.SendPropertyChanged("S_id");
					this.OnS_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_id", DbType="Int NOT NULL")]
		public int C_id
		{
			get
			{
				return this._C_id;
			}
			set
			{
				if ((this._C_id != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnC_idChanging(value);
					this.SendPropertyChanging();
					this._C_id = value;
					this.SendPropertyChanged("C_id");
					this.OnC_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_startDate", DbType="Date NOT NULL")]
		public System.DateTime C_startDate
		{
			get
			{
				return this._C_startDate;
			}
			set
			{
				if ((this._C_startDate != value))
				{
					this.OnC_startDateChanging(value);
					this.SendPropertyChanging();
					this._C_startDate = value;
					this.SendPropertyChanged("C_startDate");
					this.OnC_startDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_endDate", DbType="Date NOT NULL")]
		public System.DateTime C_endDate
		{
			get
			{
				return this._C_endDate;
			}
			set
			{
				if ((this._C_endDate != value))
				{
					this.OnC_endDateChanging(value);
					this.SendPropertyChanging();
					this._C_endDate = value;
					this.SendPropertyChanged("C_endDate");
					this.OnC_endDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CS_id", DbType="Int NOT NULL")]
		public int CS_id
		{
			get
			{
				return this._CS_id;
			}
			set
			{
				if ((this._CS_id != value))
				{
					if (this._CoursesSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCS_idChanging(value);
					this.SendPropertyChanging();
					this._CS_id = value;
					this.SendPropertyChanged("CS_id");
					this.OnCS_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentCourse", Storage="_Course", ThisKey="C_id", OtherKey="C_Id", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._C_id = value.C_Id;
					}
					else
					{
						this._C_id = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoursesSession_StudentCourse", Storage="_CoursesSession", ThisKey="CS_id", OtherKey="CS_Id", IsForeignKey=true)]
		public CoursesSession CoursesSession
		{
			get
			{
				return this._CoursesSession.Entity;
			}
			set
			{
				CoursesSession previousValue = this._CoursesSession.Entity;
				if (((previousValue != value) 
							|| (this._CoursesSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoursesSession.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._CoursesSession.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._CS_id = value.CS_Id;
					}
					else
					{
						this._CS_id = default(int);
					}
					this.SendPropertyChanged("CoursesSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentCourse", Storage="_Student", ThisKey="S_id", OtherKey="S_Id", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._S_id = value.S_Id;
					}
					else
					{
						this._S_id = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _C_Id;
		
		private string _C_name;
		
		private int _C_hours;
		
		private string _C_description;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
		private EntitySet<CoursesSession> _CoursesSessions;
		
		private EntitySet<StudentMark> _StudentMarks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC_IdChanging(int value);
    partial void OnC_IdChanged();
    partial void OnC_nameChanging(string value);
    partial void OnC_nameChanged();
    partial void OnC_hoursChanging(int value);
    partial void OnC_hoursChanged();
    partial void OnC_descriptionChanging(string value);
    partial void OnC_descriptionChanged();
    #endregion
		
		public Course()
		{
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			this._CoursesSessions = new EntitySet<CoursesSession>(new Action<CoursesSession>(this.attach_CoursesSessions), new Action<CoursesSession>(this.detach_CoursesSessions));
			this._StudentMarks = new EntitySet<StudentMark>(new Action<StudentMark>(this.attach_StudentMarks), new Action<StudentMark>(this.detach_StudentMarks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int C_Id
		{
			get
			{
				return this._C_Id;
			}
			set
			{
				if ((this._C_Id != value))
				{
					this.OnC_IdChanging(value);
					this.SendPropertyChanging();
					this._C_Id = value;
					this.SendPropertyChanged("C_Id");
					this.OnC_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string C_name
		{
			get
			{
				return this._C_name;
			}
			set
			{
				if ((this._C_name != value))
				{
					this.OnC_nameChanging(value);
					this.SendPropertyChanging();
					this._C_name = value;
					this.SendPropertyChanged("C_name");
					this.OnC_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_hours", DbType="Int NOT NULL")]
		public int C_hours
		{
			get
			{
				return this._C_hours;
			}
			set
			{
				if ((this._C_hours != value))
				{
					this.OnC_hoursChanging(value);
					this.SendPropertyChanging();
					this._C_hours = value;
					this.SendPropertyChanged("C_hours");
					this.OnC_hoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_description", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string C_description
		{
			get
			{
				return this._C_description;
			}
			set
			{
				if ((this._C_description != value))
				{
					this.OnC_descriptionChanging(value);
					this.SendPropertyChanging();
					this._C_description = value;
					this.SendPropertyChanged("C_description");
					this.OnC_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentCourse", Storage="_StudentCourses", ThisKey="C_Id", OtherKey="C_id")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CoursesSession", Storage="_CoursesSessions", ThisKey="C_Id", OtherKey="C_id")]
		public EntitySet<CoursesSession> CoursesSessions
		{
			get
			{
				return this._CoursesSessions;
			}
			set
			{
				this._CoursesSessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentMark", Storage="_StudentMarks", ThisKey="C_Id", OtherKey="C_id")]
		public EntitySet<StudentMark> StudentMarks
		{
			get
			{
				return this._StudentMarks;
			}
			set
			{
				this._StudentMarks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_CoursesSessions(CoursesSession entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CoursesSessions(CoursesSession entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_StudentMarks(StudentMark entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_StudentMarks(StudentMark entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoursesSessions")]
	public partial class CoursesSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CS_Id;
		
		private int _C_id;
		
		private System.DateTime _C_startDate;
		
		private System.DateTime _C_endDate;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCS_IdChanging(int value);
    partial void OnCS_IdChanged();
    partial void OnC_idChanging(int value);
    partial void OnC_idChanged();
    partial void OnC_startDateChanging(System.DateTime value);
    partial void OnC_startDateChanged();
    partial void OnC_endDateChanging(System.DateTime value);
    partial void OnC_endDateChanged();
    #endregion
		
		public CoursesSession()
		{
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CS_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CS_Id
		{
			get
			{
				return this._CS_Id;
			}
			set
			{
				if ((this._CS_Id != value))
				{
					this.OnCS_IdChanging(value);
					this.SendPropertyChanging();
					this._CS_Id = value;
					this.SendPropertyChanged("CS_Id");
					this.OnCS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_id", DbType="Int NOT NULL")]
		public int C_id
		{
			get
			{
				return this._C_id;
			}
			set
			{
				if ((this._C_id != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnC_idChanging(value);
					this.SendPropertyChanging();
					this._C_id = value;
					this.SendPropertyChanged("C_id");
					this.OnC_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_startDate", DbType="Date NOT NULL")]
		public System.DateTime C_startDate
		{
			get
			{
				return this._C_startDate;
			}
			set
			{
				if ((this._C_startDate != value))
				{
					this.OnC_startDateChanging(value);
					this.SendPropertyChanging();
					this._C_startDate = value;
					this.SendPropertyChanged("C_startDate");
					this.OnC_startDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_endDate", DbType="Date NOT NULL")]
		public System.DateTime C_endDate
		{
			get
			{
				return this._C_endDate;
			}
			set
			{
				if ((this._C_endDate != value))
				{
					this.OnC_endDateChanging(value);
					this.SendPropertyChanging();
					this._C_endDate = value;
					this.SendPropertyChanged("C_endDate");
					this.OnC_endDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoursesSession_StudentCourse", Storage="_StudentCourses", ThisKey="CS_Id", OtherKey="CS_id")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CoursesSession", Storage="_Course", ThisKey="C_id", OtherKey="C_Id", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CoursesSessions.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CoursesSessions.Add(this);
						this._C_id = value.C_Id;
					}
					else
					{
						this._C_id = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.CoursesSession = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.CoursesSession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _S_Id;
		
		private string _S_firstName;
		
		private string _S_lastName;
		
		private string _S_gender;
		
		private System.DateTime _S_birthDate;
		
		private string _S_phone;
		
		private string _S_parentPhone;
		
		private string _S_address;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
		private EntitySet<StudentMark> _StudentMarks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnS_IdChanging(int value);
    partial void OnS_IdChanged();
    partial void OnS_firstNameChanging(string value);
    partial void OnS_firstNameChanged();
    partial void OnS_lastNameChanging(string value);
    partial void OnS_lastNameChanged();
    partial void OnS_genderChanging(string value);
    partial void OnS_genderChanged();
    partial void OnS_birthDateChanging(System.DateTime value);
    partial void OnS_birthDateChanged();
    partial void OnS_phoneChanging(string value);
    partial void OnS_phoneChanged();
    partial void OnS_parentPhoneChanging(string value);
    partial void OnS_parentPhoneChanged();
    partial void OnS_addressChanging(string value);
    partial void OnS_addressChanged();
    #endregion
		
		public Student()
		{
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			this._StudentMarks = new EntitySet<StudentMark>(new Action<StudentMark>(this.attach_StudentMarks), new Action<StudentMark>(this.detach_StudentMarks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int S_Id
		{
			get
			{
				return this._S_Id;
			}
			set
			{
				if ((this._S_Id != value))
				{
					this.OnS_IdChanging(value);
					this.SendPropertyChanging();
					this._S_Id = value;
					this.SendPropertyChanged("S_Id");
					this.OnS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_firstName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string S_firstName
		{
			get
			{
				return this._S_firstName;
			}
			set
			{
				if ((this._S_firstName != value))
				{
					this.OnS_firstNameChanging(value);
					this.SendPropertyChanging();
					this._S_firstName = value;
					this.SendPropertyChanged("S_firstName");
					this.OnS_firstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_lastName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string S_lastName
		{
			get
			{
				return this._S_lastName;
			}
			set
			{
				if ((this._S_lastName != value))
				{
					this.OnS_lastNameChanging(value);
					this.SendPropertyChanging();
					this._S_lastName = value;
					this.SendPropertyChanged("S_lastName");
					this.OnS_lastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_gender", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string S_gender
		{
			get
			{
				return this._S_gender;
			}
			set
			{
				if ((this._S_gender != value))
				{
					this.OnS_genderChanging(value);
					this.SendPropertyChanging();
					this._S_gender = value;
					this.SendPropertyChanged("S_gender");
					this.OnS_genderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_birthDate", DbType="Date NOT NULL")]
		public System.DateTime S_birthDate
		{
			get
			{
				return this._S_birthDate;
			}
			set
			{
				if ((this._S_birthDate != value))
				{
					this.OnS_birthDateChanging(value);
					this.SendPropertyChanging();
					this._S_birthDate = value;
					this.SendPropertyChanged("S_birthDate");
					this.OnS_birthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_phone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string S_phone
		{
			get
			{
				return this._S_phone;
			}
			set
			{
				if ((this._S_phone != value))
				{
					this.OnS_phoneChanging(value);
					this.SendPropertyChanging();
					this._S_phone = value;
					this.SendPropertyChanged("S_phone");
					this.OnS_phoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_parentPhone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string S_parentPhone
		{
			get
			{
				return this._S_parentPhone;
			}
			set
			{
				if ((this._S_parentPhone != value))
				{
					this.OnS_parentPhoneChanging(value);
					this.SendPropertyChanging();
					this._S_parentPhone = value;
					this.SendPropertyChanged("S_parentPhone");
					this.OnS_parentPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_address", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string S_address
		{
			get
			{
				return this._S_address;
			}
			set
			{
				if ((this._S_address != value))
				{
					this.OnS_addressChanging(value);
					this.SendPropertyChanging();
					this._S_address = value;
					this.SendPropertyChanged("S_address");
					this.OnS_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentCourse", Storage="_StudentCourses", ThisKey="S_Id", OtherKey="S_id")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentMark", Storage="_StudentMarks", ThisKey="S_Id", OtherKey="S_id")]
		public EntitySet<StudentMark> StudentMarks
		{
			get
			{
				return this._StudentMarks;
			}
			set
			{
				this._StudentMarks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_StudentMarks(StudentMark entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentMarks(StudentMark entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _E_Id;
		
		private string _E_firstName;
		
		private string _E_lastName;
		
		private System.DateTime _E_dateBirth;
		
		private string _E_gender;
		
		private string _E_phone;
		
		private string _E_userName;
		
		private string _E_password;
		
		private string _E_address;
		
		private string _E_role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnE_IdChanging(int value);
    partial void OnE_IdChanged();
    partial void OnE_firstNameChanging(string value);
    partial void OnE_firstNameChanged();
    partial void OnE_lastNameChanging(string value);
    partial void OnE_lastNameChanged();
    partial void OnE_dateBirthChanging(System.DateTime value);
    partial void OnE_dateBirthChanged();
    partial void OnE_genderChanging(string value);
    partial void OnE_genderChanged();
    partial void OnE_phoneChanging(string value);
    partial void OnE_phoneChanged();
    partial void OnE_userNameChanging(string value);
    partial void OnE_userNameChanged();
    partial void OnE_passwordChanging(string value);
    partial void OnE_passwordChanged();
    partial void OnE_addressChanging(string value);
    partial void OnE_addressChanged();
    partial void OnE_roleChanging(string value);
    partial void OnE_roleChanged();
    #endregion
		
		public Employee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int E_Id
		{
			get
			{
				return this._E_Id;
			}
			set
			{
				if ((this._E_Id != value))
				{
					this.OnE_IdChanging(value);
					this.SendPropertyChanging();
					this._E_Id = value;
					this.SendPropertyChanged("E_Id");
					this.OnE_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_firstName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string E_firstName
		{
			get
			{
				return this._E_firstName;
			}
			set
			{
				if ((this._E_firstName != value))
				{
					this.OnE_firstNameChanging(value);
					this.SendPropertyChanging();
					this._E_firstName = value;
					this.SendPropertyChanged("E_firstName");
					this.OnE_firstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_lastName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string E_lastName
		{
			get
			{
				return this._E_lastName;
			}
			set
			{
				if ((this._E_lastName != value))
				{
					this.OnE_lastNameChanging(value);
					this.SendPropertyChanging();
					this._E_lastName = value;
					this.SendPropertyChanged("E_lastName");
					this.OnE_lastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_dateBirth", DbType="Date NOT NULL")]
		public System.DateTime E_dateBirth
		{
			get
			{
				return this._E_dateBirth;
			}
			set
			{
				if ((this._E_dateBirth != value))
				{
					this.OnE_dateBirthChanging(value);
					this.SendPropertyChanging();
					this._E_dateBirth = value;
					this.SendPropertyChanged("E_dateBirth");
					this.OnE_dateBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_gender", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string E_gender
		{
			get
			{
				return this._E_gender;
			}
			set
			{
				if ((this._E_gender != value))
				{
					this.OnE_genderChanging(value);
					this.SendPropertyChanging();
					this._E_gender = value;
					this.SendPropertyChanged("E_gender");
					this.OnE_genderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_phone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string E_phone
		{
			get
			{
				return this._E_phone;
			}
			set
			{
				if ((this._E_phone != value))
				{
					this.OnE_phoneChanging(value);
					this.SendPropertyChanging();
					this._E_phone = value;
					this.SendPropertyChanged("E_phone");
					this.OnE_phoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_userName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string E_userName
		{
			get
			{
				return this._E_userName;
			}
			set
			{
				if ((this._E_userName != value))
				{
					this.OnE_userNameChanging(value);
					this.SendPropertyChanging();
					this._E_userName = value;
					this.SendPropertyChanged("E_userName");
					this.OnE_userNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_password", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string E_password
		{
			get
			{
				return this._E_password;
			}
			set
			{
				if ((this._E_password != value))
				{
					this.OnE_passwordChanging(value);
					this.SendPropertyChanging();
					this._E_password = value;
					this.SendPropertyChanged("E_password");
					this.OnE_passwordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_address", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string E_address
		{
			get
			{
				return this._E_address;
			}
			set
			{
				if ((this._E_address != value))
				{
					this.OnE_addressChanging(value);
					this.SendPropertyChanging();
					this._E_address = value;
					this.SendPropertyChanged("E_address");
					this.OnE_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_role", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string E_role
		{
			get
			{
				return this._E_role;
			}
			set
			{
				if ((this._E_role != value))
				{
					this.OnE_roleChanging(value);
					this.SendPropertyChanging();
					this._E_role = value;
					this.SendPropertyChanged("E_role");
					this.OnE_roleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentMarks")]
	public partial class StudentMark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SM_Id;
		
		private int _S_id;
		
		private int _C_id;
		
		private int _S_mark;
		
		private string _SM_description;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSM_IdChanging(int value);
    partial void OnSM_IdChanged();
    partial void OnS_idChanging(int value);
    partial void OnS_idChanged();
    partial void OnC_idChanging(int value);
    partial void OnC_idChanged();
    partial void OnS_markChanging(int value);
    partial void OnS_markChanged();
    partial void OnSM_descriptionChanging(string value);
    partial void OnSM_descriptionChanged();
    #endregion
		
		public StudentMark()
		{
			this._Course = default(EntityRef<Course>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SM_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SM_Id
		{
			get
			{
				return this._SM_Id;
			}
			set
			{
				if ((this._SM_Id != value))
				{
					this.OnSM_IdChanging(value);
					this.SendPropertyChanging();
					this._SM_Id = value;
					this.SendPropertyChanged("SM_Id");
					this.OnSM_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_id", DbType="Int NOT NULL")]
		public int S_id
		{
			get
			{
				return this._S_id;
			}
			set
			{
				if ((this._S_id != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_idChanging(value);
					this.SendPropertyChanging();
					this._S_id = value;
					this.SendPropertyChanged("S_id");
					this.OnS_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_id", DbType="Int NOT NULL")]
		public int C_id
		{
			get
			{
				return this._C_id;
			}
			set
			{
				if ((this._C_id != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnC_idChanging(value);
					this.SendPropertyChanging();
					this._C_id = value;
					this.SendPropertyChanged("C_id");
					this.OnC_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_mark", DbType="Int NOT NULL")]
		public int S_mark
		{
			get
			{
				return this._S_mark;
			}
			set
			{
				if ((this._S_mark != value))
				{
					this.OnS_markChanging(value);
					this.SendPropertyChanging();
					this._S_mark = value;
					this.SendPropertyChanged("S_mark");
					this.OnS_markChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SM_description", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string SM_description
		{
			get
			{
				return this._SM_description;
			}
			set
			{
				if ((this._SM_description != value))
				{
					this.OnSM_descriptionChanging(value);
					this.SendPropertyChanging();
					this._SM_description = value;
					this.SendPropertyChanged("SM_description");
					this.OnSM_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentMark", Storage="_Course", ThisKey="C_id", OtherKey="C_Id", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.StudentMarks.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.StudentMarks.Add(this);
						this._C_id = value.C_Id;
					}
					else
					{
						this._C_id = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentMark", Storage="_Student", ThisKey="S_id", OtherKey="S_Id", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentMarks.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentMarks.Add(this);
						this._S_id = value.S_Id;
					}
					else
					{
						this._S_id = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
